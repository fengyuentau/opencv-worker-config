#!/bin/bash -e
{ # force bash to read file completelly

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
BASE_DIR="$(dirname "${SCRIPT_DIR}" )"

if [[ -f "${SCRIPT_DIR}/buildenv-pre" ]]; then
  . "${SCRIPT_DIR}/buildenv-pre"
fi

if [[ -n "${BUILD_INITIALIZE}" || -n "${BUILD_FINALIZE}" ]]; then
  CI_CHECK_FREE_SPACE=${CI_REQUIRED_FREE_SPACE:-10737418240}  # 10G
  CI_CHECK_FREE_SPACE_DOCKER=${CI_REQUIRED_FREE_SPACE_DOCKER:-2147483648}  # 2G
  DEFAULT_CI_DOCKER_PATH=/var/lib/docker
  if [[ ! -d /var/lib/docker ]]; then  # check if we run in container
    DEFAULT_CI_DOCKER_PATH=/
  fi
  CI_DOCKER_PATH=${CI_DOCKER_PATH:-${DEFAULT_CI_DOCKER_PATH}}
  while /bin/true; do
    FREESPACE=$(($(stat -f --format="%a*%S" .)))
    FREESPACE_DOCKER=$(($(stat -f --format="%a*%S" ${CI_DOCKER_PATH})))
    if [[ $FREESPACE -gt ${CI_CHECK_FREE_SPACE} ]]; then
      if [[ $FREESPACE_DOCKER -gt ${CI_CHECK_FREE_SPACE_DOCKER} ]]; then
        break
      else
        echo "ERROR: Not enough free space on Docker storage to launch build: ${FREESPACE_DOCKER} ..." >&2
      fi
    else
      echo "ERROR: Not enough free space to launch build: ${FREESPACE} ..." >&2
    fi
    sleep 300
  done
fi

if [[ -n "${BUILD_INIT_CI}" || "$1 $2" == "ci init" ]]; then
  [ -z "${BUILD_CI_URL}" ] && BUILD_CI_URL=$(cd src; git ls-remote --get-url origin | sed -r 's/(.git)?$/-ci\1/g')
  (
    mkdir -p ci; cd ci;
    [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1 || git clone --depth=10 ${BUILD_CI_URL} . 1>&2
    git fetch ${BUILD_CI_URL} ${BUILD_CI_BRANCH:-HEAD} 1>&2 && git reset --hard 1>&2 && git clean -f -d -x 1>&2 && git checkout -q --detach FETCH_HEAD 1>&2
  ) || exit 1
fi

if [[ -n "${BUILD_IMAGE}" && -z "${BUILD_IMAGE_}" ]]; then
  BUILD_IMAGE_=$(echo ${BUILD_IMAGE} | sed 's/^opencv-//g' | sed 's/:/--/g')
  BUILD_IMAGE_ORIGIN="${BUILD_IMAGE_}"
  BUILD_IMAGE_ORIGIN0=""
  while [ "${BUILD_IMAGE_}" != "${BUILD_IMAGE_ORIGIN0}" ]; do
    BUILD_IMAGE_ORIGIN0="${BUILD_IMAGE_}"
    if [ -f "${BASE_DIR}/images/${BUILD_IMAGE_}/alias" ]; then
      while read LINE; do
        if [ -n "${LINE}" ]; then
          BUILD_IMAGE_="$LINE"
        fi
      done <"${BASE_DIR}/images/${BUILD_IMAGE_}/alias"
    fi
  done
  if [ -n "${BUILD_INITIALIZE}" ]; then
    if [ "${BUILD_IMAGE_}" != "${BUILD_IMAGE_ORIGIN}" ]; then
      echo "Actual image: ${BUILD_IMAGE_}"
    fi
    if [ ! -d "${BASE_DIR}/images/${BUILD_IMAGE_}" ]; then
      echo "FATAL: Image '$BUILD_IMAGE_' is not supported by this build worker"
      exit 1
    fi
  fi
  unset BUILD_IMAGE_ORIGIN0
fi

if [[ -z "${OPENCV_CMAKE_HOOKS_DIR}" ]]; then
  CI_PATH="${BUILD_DIR_PATH:-/build/${BUILD_DIR}}/ci"
  if [[ -n "${BUILD_IMAGE_}" && -f "${CI_PATH}/cmake_checks/${BUILD_DIR}/${BUILD_IMAGE_}/CMAKE_INIT.cmake" ]]; then
    export "OPENCV_CMAKE_HOOKS_DIR=${CI_PATH}/cmake_checks/${BUILD_DIR}/${BUILD_IMAGE_}"
  elif [[ -n "${BUILD_IMAGE_ORIGIN}" && -f "${CI_PATH}/cmake_checks/${BUILD_DIR}/${BUILD_IMAGE_ORIGIN}/CMAKE_INIT.cmake" ]]; then
    if [ -n "${BUILD_INITIALIZE}" ]; then
        echo "WARNING: Using CMake checks from aliased image" >&2
    fi
    export "OPENCV_CMAKE_HOOKS_DIR=${CI_PATH}/cmake_checks/${BUILD_DIR}/${BUILD_IMAGE_ORIGIN}"
  elif [[ -f "${CI_PATH}/cmake_checks/${BUILD_DIR}/CMAKE_INIT.cmake" ]]; then
    export "OPENCV_CMAKE_HOOKS_DIR=${CI_PATH}/cmake_checks/${BUILD_DIR}"
  fi
  unset CI_PATH
fi

if [[ -n "${BUILD_IMAGE_}" ]]; then
  BUILD_IMAGE=${BUILD_IMAGE_}
fi

# limit resources for spawned processes
[ ! -d /sys/fs/cgroup/memory/build_buildenv ] || echo $$ > /sys/fs/cgroup/memory/build_buildenv/tasks

. /app/scripts/container_helpers.sh

if [ -n "${BUILD_INITIALIZE}" ]; then
  if [[ -f /app/bin/buildenv-init-pre ]]; then
    . /app/bin/buildenv-init-pre
  fi
  set +e
  opencv_worker_container_create ${BUILD_IMAGE:-invalid_build_image}
  opencv_worker_container_exec echo "Initialize"
  unset BUILD_INITIALIZE
#  opencv_worker_container_exec cmake "--version"
#  opencv_worker_container_exec ls -al /dev
#  opencv_worker_container_exec ls -aln /dev/dri || true
#  opencv_worker_container_exec id
#  opencv_worker_container_exec bash -c "export; id; whoami"
  #opencv_worker_container_exec sleep 30
  if [[ -f /app/bin/buildenv-init-post ]]; then
    . /app/bin/buildenv-init-post
  fi
  exit $?
fi
if [ -n "${BUILD_FINALIZE}" ]; then
  if [[ -f /app/bin/buildenv-finalize-pre ]]; then
    . /app/bin/buildenv-finalize-pre
  fi
  set +e
  if [ -n "${BUILD_SRC_OPENCV}" ]; then (set -e; cd $BUILD_SRC_OPENCV; echo "OpenCV:"; git status) fi
  if [ -n "${BUILD_SRC_OPENCV_CONTRIB}" ]; then (set -e; cd $BUILD_SRC_OPENCV_CONTRIB; echo "Contrib:"; git status) fi
  if [ -n "${BUILD_SRC_OPENCV_EXTRA}" ]; then (set -e; cd $BUILD_SRC_OPENCV_EXTRA; echo "Extra:"; git status) fi
  opencv_worker_container_dump_diff
  if [ ! -n "${BUILD_PRECOMMIT}" ]; then
    echo "=== Clean 'build' directory ..."
    (cd build;
      make clean >/dev/null 2>&1 || true
      ninja clean >/dev/null 2>&1 || true
    )
    if [ -d install ]; then
      echo "=== Clean 'install' directory ..."
      rm -rf ./install
    fi
  fi
  if [[ -f /app/bin/buildenv-finalize-post ]]; then
    . /app/bin/buildenv-finalize-post
  fi
  exit $?
fi
if [ -n "${BUILD_CLEANUP}" ]; then
  if [[ -f /app/bin/buildenv-cleanup-pre ]]; then
    . /app/bin/buildenv-cleanup-pre
  fi
  opencv_worker_container_cleanup
  if [[ -f /app/bin/buildenv-cleanup-post ]]; then
    . /app/bin/buildenv-cleanup-post
  fi
  exit $?
fi

if [[ "$1" == "ci" ]]; then
  shift
  if [[ "${BUILD_CI_TARGET_OS}" == "linux" ]]; then
    SCRIPT=./ci/linux/$1
  else
    SCRIPT=./ci/linux-${BUILD_CI_TARGET_OS}/$1
  fi
  shift
  exec $SCRIPT "$@"
fi

opencv_worker_container_exec "$@"

exit 0
}
