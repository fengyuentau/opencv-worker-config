#!/bin/bash -e

if [[ -n "${BUILD_INITIALIZE}" || -n "${BUILD_FINALIZE}" ]]; then
  while /bin/true; do
    FREESPACE=$(($(stat -f --format="%a*%S" .)))
    if [[ $FREESPACE -gt 10737418240 ]]; then # 10G
       break
    fi
    echo "ERROR: Not enough free space to launch build: ${FREESPACE} ..." >&2
    sleep 300
  done
fi

if [[ -n "${BUILD_INIT_CI}" || "$1 $2" == "ci init" ]]; then
  [ -z "${BUILD_CI_URL}" ] && BUILD_CI_URL=$(cd src; git ls-remote --get-url origin | sed -r 's/(.git)?$/-ci\1/g')
  (
    mkdir -p ci; cd ci;
    [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1 || git clone --depth=10 ${BUILD_CI_URL} . 1>&2
    git fetch ${BUILD_CI_URL} ${BUILD_CI_BRANCH:-HEAD} 1>&2 && git reset --hard 1>&2 && git clean -f -d -x 1>&2 && git checkout -q --detach FETCH_HEAD 1>&2
  ) || exit 1
fi

CI_PATH="${BUILD_DIR_PATH:-/build/${BUILD_DIR}}/ci"
IMAGE_BASE=$(echo ${BUILD_IMAGE} | sed 's/^opencv-//g' | sed 's/:/--/g')
if [[ -n "${IMAGE_BASE}" && -f "${CI_PATH}/cmake_checks/${BUILD_DIR}/${IMAGE_BASE}/CMAKE_INIT.cmake" ]]; then
  export "OPENCV_CMAKE_HOOKS_DIR=${CI_PATH}/cmake_checks/${BUILD_DIR}/${IMAGE_BASE}"
elif [[ -f "${CI_PATH}/cmake_checks/${BUILD_DIR}/CMAKE_INIT.cmake" ]]; then
  export "OPENCV_CMAKE_HOOKS_DIR=${CI_PATH}/cmake_checks/${BUILD_DIR}"
fi

# limit resources for spawned processes
[ ! -d /sys/fs/cgroup/memory/build_buildenv ] || echo $$ > /sys/fs/cgroup/memory/build_buildenv/tasks

. /app/scripts/container_helpers.sh

if [[ -f /app/bin/buildenv-pre ]]; then
  . /app/bin/buildenv-pre
fi

if [ -n "${BUILD_INITIALIZE}" ]; then
  if [[ -f /app/bin/buildenv-init-pre ]]; then
    . /app/bin/buildenv-init-pre
  fi
  set +e
  opencv_worker_container_create ${BUILD_IMAGE:-opencv-ubuntu:14.04}
  opencv_worker_container_exec echo "Initialize"
  unset BUILD_INITIALIZE
#  opencv_worker_container_exec cmake "--version"
#  opencv_worker_container_exec ls -al /dev
#  opencv_worker_container_exec ls -aln /dev/dri || true
#  opencv_worker_container_exec id
#  opencv_worker_container_exec bash -c "export; id; whoami"
  #opencv_worker_container_exec sleep 30
  if [[ -f /app/bin/buildenv-init-post ]]; then
    . /app/bin/buildenv-init-post
  fi
  exit $?
fi
if [ -n "${BUILD_FINALIZE}" ]; then
  if [[ -f /app/bin/buildenv-finalize-pre ]]; then
    . /app/bin/buildenv-finalize-pre
  fi
  set +e
  if [ -n "${BUILD_SRC_OPENCV}" ]; then (set -e; cd $BUILD_SRC_OPENCV; echo "OpenCV:"; git status) fi
  if [ -n "${BUILD_SRC_OPENCV_CONTRIB}" ]; then (set -e; cd $BUILD_SRC_OPENCV_CONTRIB; echo "Contrib:"; git status) fi
  if [ -n "${BUILD_SRC_OPENCV_EXTRA}" ]; then (set -e; cd $BUILD_SRC_OPENCV_EXTRA; echo "Extra:"; git status) fi
  opencv_worker_container_dump_diff
  if [ ! -n "${BUILD_PRECOMMIT}" ]; then
    echo "=== Clean 'build' directory ..."
    (cd build;
      make clean >/dev/null 2>&1 || true
      ninja clean >/dev/null 2>&1 || true
    )
    if [ -d install ]; then
      echo "=== Clean 'install' directory ..."
      rm -rf ./install
    fi
  fi
  if [[ -f /app/bin/buildenv-finalize-post ]]; then
    . /app/bin/buildenv-finalize-post
  fi
  exit $?
fi
if [ -n "${BUILD_CLEANUP}" ]; then
  if [[ -f /app/bin/buildenv-cleanup-pre ]]; then
    . /app/bin/buildenv-cleanup-pre
  fi
  opencv_worker_container_cleanup
  if [[ -f /app/bin/buildenv-cleanup-post ]]; then
    . /app/bin/buildenv-cleanup-post
  fi
  exit $?
fi

if [[ "$1" == "ci" ]]; then
  shift
  if [[ "${BUILD_CI_TARGET_OS}" == "linux" ]]; then
    SCRIPT=./ci/linux/$1
  else
    SCRIPT=./ci/linux-${BUILD_CI_TARGET_OS}/$1
  fi
  shift
  exec $SCRIPT "$@"
fi

opencv_worker_container_exec "$@"
