#!/bin/bash -e
{ # force bash to read file completelly

CCACHE_VERSION=$(ccache --version 2>/dev/null | head -n 1 | tr ' ' '\n' | tail -n1)
if [ -n "${CCACHE_VERSION}" ]; then
  # Don't mix ccache storages with different versions or platforms
  if [[ "$(getconf LONG_BIT)" != "64" ]]; then
    CCACHE_VERSION="${CCACHE_VERSION}_$(getconf LONG_BIT)"
  fi
  export CCACHE_DIR=/build/.ccache/ver_${CCACHE_VERSION}
  export CCACHE_SLOPPINESS=pch_defines,time_macros,file_macro
  export CCACHE_CPP2=true
  # Doesn't work in docker:
  #export CCACHE_HARDLINK=1
  # ccache log size is not limited, so don't put it into permanent directory like CCACHE_DIR
  export CCACHE_LOGFILE=$BASE_DIR/.container/ccache.log
  if [ ! -d "${CCACHE_DIR}" ]; then
    mkdir -p "${CCACHE_DIR}"
    ccache -M 8G
  fi
  export CCACHE_TEMPDIR=/tmp/ccache  # prefer to use tmpfs storage
  if [ ! -d "${CCACHE_TEMPDIR}" ]; then
    mkdir -p "${CCACHE_TEMPDIR}"
  fi
fi

if [[ -n "${BUILD_INITIALIZE}" ]]; then
  echo "==================== OS/System information ===================="
  (
  echo "uname: $(uname -smpio 2>/dev/null || uname -smo 2>/dev/null || uname 2>/dev/null || echo 'N/A')"
  echo "getconf[LONG_BIT]: $(getconf LONG_BIT 2>/dev/null || echo 'N/A')"
  [ -f /etc/os-release ] && grep -E '(VERSION|NAME|ID)' /etc/os-release  # Debian
  [ -f /etc/lsb-release ] && cat /etc/lsb-release  # Ubuntu
  [ -f /etc/redhat-release ] && cat /etc/redhat-release  # Fedora, CentOS
  [ -f /etc/alpine-release ] && cat /etc/alpine-release  # Alpine
  ) || true
  echo "==============================================================="
fi

get_image_script()
{
  local image=$1
  if [[ -n "$image" ]]; then
    local script_name="/app/bin/buildenv-$image"
    if [ -f "${script_name}" ]; then
      echo "${script_name}"
    fi
  else
    return 0
  fi
}

script_name=$(get_image_script all)
if [ -n "${script_name}" ]; then
  . "${script_name}" "$@"
fi

script_name=$(get_image_script $BUILD_IMAGE)
if [ -n "${script_name}" ]; then
  . "${script_name}" "$@"
  exit $?
fi

if [ -d "/tools" ]; then
  export PATH=$PATH:/tools
fi

script_name="/tools/buildenv"
if [ -f "${script_name}" ]; then
  . "${script_name}" "$@"
  exit $?
fi

exec "$@"

exit 0
}
